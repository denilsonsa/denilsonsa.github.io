<?xml version="1.0" encoding="UTF-8"?>
{% assign width    = include.width    %}
{% assign height   = include.height   %}
<svg viewBox="0 0 {{ width }} {{ height }}"
	preserveAspectRatio="none"
	version="1.1"
	xmlns="http://www.w3.org/2000/svg"
	xmlns:xlink="http://www.w3.org/1999/xlink"
>

{% assign percents = include.percents %}
{% assign caption  = include.caption %}
{% assign minsize = width %}
{% assign maxsize = height %}
{% if width > height %}
	{% assign minsize = height %}
	{% assign maxsize = width %}
{% endif %}

<!-- https://en.wikipedia.org/wiki/Overscan#Overscan_amounts -->

<style type="text/css"><![CDATA[

{% assign blacklinewidth = 2 %}
{% assign whiteoutlinewidth = 1 %}

text {
	font-family: "Arial", sans-serif;
	font-weight: bold;
}

.overscan rect {
	fill: none;
	stroke-width: 2px;
}
.overscan text {
	font-size: 15px;
	/* text-shadow is not supported by Inkscape, but seems to be rendered fine in Chrome and Firefox */
	text-shadow: 1px 1px 0 black;
}
.overscan.red     rect { stroke: red;     } .overscan.red     text { fill: red;     }
.overscan.yellow  rect { stroke: yellow;  } .overscan.yellow  text { fill: yellow;  }
.overscan.green   rect { stroke: green;   } .overscan.green   text { fill: green;   }
.overscan.cyan    rect { stroke: cyan;    } .overscan.cyan    text { fill: cyan;    }
.overscan.blue    rect { stroke: blue;    } .overscan.blue    text { fill: blue;    }
.overscan.magenta rect { stroke: magenta; } .overscan.magenta text { fill: magenta; }

.ruleofthirds.white .littlecross,
.circleellipse.white circle,
.circleellipse.white ellipse,
.aspectratio.white rect,
.aspectratio.white circle,
.aspectratio.white line {
	fill: none;
	stroke: white;
	stroke-width: {{ whiteoutlinewidth | times: 2 | plus: blacklinewidth }}px;
}

.ruleofthirds.black .littlecross,
.circleellipse.black circle,
.circleellipse.black ellipse,
.aspectratio.black rect,
.aspectratio.black circle,
.aspectratio.black line {
	fill: none;
	stroke: black;
	stroke-width: {{ blacklinewidth }}px;
}

.ruleofthirds text {
	font-size: 22px;
}
.caption text {
	font-size: 30px;
	text-anchor: middle;
	dominant-baseline: central;
}

.ruleofthirds.black text,
.caption.black text {
	fill: black;
	stroke: none;
}
.ruleofthirds.white text,
.caption.white text {
	stroke: white;
	stroke-width: {{ whiteoutlinewidth | times: 2 }}px;
}

]]></style>

<defs>

<!-- Using "symbol" will crop the graphic and generate a new coordinate system. Using "g" works better here. -->
<g id="littlecross">
	<line x1="-8" x2="8" y1="0" y2="0"/>
	<line x1="0" x2="0" y1="-8" y2="8"/>
</g>

<!--
{% comment %}
I wish I could style the elements "inside" a <use> instance. It is possible
with CSS and the "deep combinator" (previously `/deep/`, currently `>>>`) or
`::shadow` pseudo-element.

http://dev.w3.org/csswg/css-scoping/#deep-combinator

However, support for those selectors is very low, almost non-existent.


As a workaround, I can set a single fill and a single stroke for the entire
<use> element.

Alternatively, it is possible to set a second color to the CSS `color:` attribute, and use that color as `currentColor` value.

http://codepen.io/FWeinb/blog/quick-tip-svg-use-style-two-colors


For now, I'm sometimes using simple <use> elements, and other times I'm just
replicating the element twice.
{% endcomment %}
-->

</defs>

<!-- A background covering the entire image just to make it easier to test the white color. -->
<!-- rect fill="#808080" x="0" y="0" width="{{ width }}" height="{{ height }}" / -->

<!-- A circle and an ellipse with the maximum size. -->
{% for i in (1..2) %}
<g class="circleellipse {% cycle 'white','black' %}">
	<circle cx="{{ width | divided_by: 2 }}" cy="{{ height | divided_by: 2 }}" r="{{ minsize | divided_by: 2 }}"/>
	<ellipse cx="{{ width | divided_by: 2 }}" cy="{{ height | divided_by: 2 }}" rx="{{ width | divided_by: 2 }}" ry="{{ height | divided_by: 2 }}"/>
</g>
{% endfor %}

<!-- Rectangles for each overscan percentage. -->
{% for percent in percents %}
{% assign: x = percent | times: width  | divided_by: 100 %}
{% assign: y = percent | times: height | divided_by: 100 %}
{% assign: w = width  | minus: x | minus: x %}
{% assign: h = height | minus: y | minus: y %}

<g class="overscan {% cycle 'red','yellow','green','cyan','blue','magenta' %}">
	<rect x="{{ x }}"                     y="{{ y }}" width="{{ w }}" height="{{ h }}"/>

	<text x="{{ x                     }}" y="{{ y                 }}" text-anchor="start"  dominant-baseline="text-before-edge">{{ percent }}%</text>
	<text x="{{ width | divided_by: 2 }}" y="{{ y                 }}" text-anchor="middle" dominant-baseline="text-before-edge">{{ percent }}%</text>
	<text x="{{ width | minus: x      }}" y="{{ y                 }}" text-anchor="end"    dominant-baseline="text-before-edge">{{ percent }}%</text>

	<text x="{{ x                     }}" y="{{ height | minus: y }}" text-anchor="start"  dominant-baseline="text-after-edge">{{ percent }}%</text>
	<text x="{{ width | divided_by: 2 }}" y="{{ height | minus: y }}" text-anchor="middle" dominant-baseline="text-after-edge">{{ percent }}%</text>
	<text x="{{ width | minus: x      }}" y="{{ height | minus: y }}" text-anchor="end"    dominant-baseline="text-after-edge">{{ percent }}%</text>
</g>

{% endfor %}

<!-- A drawing to check the aspect ratio. -->
<!--
	This drawing has a square, a circle, and a diagonal cross.

	It has half of the size of the minimum dimension of the graphic (i.e. half
	of the height in a landscape graphic).

	The diagonal cross can be used for checking distortions in the aspect
	ratio. If the lines are not perpendicular, then the aspect ratio is
	different than expected.
-->
{% for i in (1..2) %}
<g class="aspectratio {% cycle 'white','black' %}" transform="translate({{ width | divided_by: 2 }} {{ height | divided_by: 2 }})">
	<rect x="-{{ minsize | divided_by: 4 }}" y="-{{ minsize | divided_by: 4 }}" width="{{ minsize | divided_by: 2 }}" height="{{ minsize | divided_by: 2 }}"/>
	<circle cx="0" cy="0" r="{{ minsize | divided_by: 4 }}"/>
	<line x1="-{{ minsize | divided_by: 4 }}" y1="-{{ minsize | divided_by: 4 }}" x2="{{ minsize | divided_by: 4 }}" y2="{{ minsize | divided_by: 4 }}"/>
	<line x1="-{{ minsize | divided_by: 4 }}" y1="{{ minsize | divided_by: 4 }}" x2="{{ minsize | divided_by: 4 }}" y2="-{{ minsize | divided_by: 4 }}"/>
</g>
{% endfor %}

<!-- Rule of thirds. -->
{% for i in (1..2) %}
<g class="ruleofthirds {% cycle 'white','black' %}">
	<g transform="translate({{ width | divided_by: 3 | times: 1 }}, {{ height | divided_by: 3 | times: 1 }})">
		<use class="littlecross" xlink:href="#littlecross"/>
		<text x="0" y="0" text-anchor="end" dominant-baseline="text-after-edge">⅓</text>
	</g>
	<g transform="translate({{ width | divided_by: 3 | times: 2 }}, {{ height | divided_by: 3 | times: 1 }})">
		<use class="littlecross" xlink:href="#littlecross"/>
		<text x="0" y="0" text-anchor="start" dominant-baseline="text-after-edge">⅓</text>
	</g>
	<g transform="translate({{ width | divided_by: 3 | times: 1 }}, {{ height | divided_by: 3 | times: 2 }})">
		<use class="littlecross" xlink:href="#littlecross"/>
		<text x="0" y="0" text-anchor="end" dominant-baseline="text-before-edge">⅓</text>
	</g>
	<g transform="translate({{ width | divided_by: 3 | times: 2 }}, {{ height | divided_by: 3 | times: 2 }})">
		<use class="littlecross" xlink:href="#littlecross"/>
		<text x="0" y="0" text-anchor="start" dominant-baseline="text-before-edge">⅓</text>
	</g>
</g>
{% endfor %}

<!-- Caption/title text. -->
{% for i in (1..2) %}
<g class="caption {% cycle 'white','black' %}">
	<text x="{{ width | divided_by: 2 }}" y="{{ height | times: 3 | divided_by: 8 }}">{{ caption }}</text>
</g>
{% endfor %}

</svg>
